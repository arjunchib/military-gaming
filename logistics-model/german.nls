breed [german-corps a-german-corps]
breed [motor-companys motor-company]

german-corps-own [supply capacity current-junction speed units attrition]
motor-companys-own [supply capacity current-junction speed corps to-front?]

globals [number-trucks]

to setup-germans
  
  set-default-shape german-corps "square"
  
  let start-junction one-of junctions with [label = "Brussels"]
  
  create-german-corps 6 [
    setxy [xcor] of start-junction [ycor] of start-junction
    set supply 45
    set current-junction start-junction
    set color yellow
    set size 1
    set speed german-speed * time-scale * map-scale
    set units german-num-units
    set capacity 45
  ]
  
  set number-trucks 81
end

to step-german
  ask french-corps [set attacker nobody]
  check-french-corps
  supply-german-corps
end

;; dest_label: label of the destination
;; This proc moves the German corps along the shortest path between the 
;; current location of the German corps and the destination
to move-german-corps [dest-junction]
  ask self [
    nw:set-context junctions roads
    if-else distance current-junction <= speed [
      move-to current-junction
      let shortest-path (list current-junction)
      ask current-junction 
      [
        set shortest-path nw:turtles-on-weighted-path-to dest-junction weight
      ]
      let next-junction item 0 shortest-path
      if length shortest-path > 1 [set next-junction item 1 shortest-path]
      face next-junction
      set current-junction next-junction
    ][
      set speed german-speed * time-scale * map-scale
      forward speed * (random-float 0.5 + 0.75)
    ]
  ]
end

;; Check to see if French corps are nearby
;; If within pursue-rad => Pursue
;;      If within attack-rad => Attack
;; Else keep moving towards Meaux
to check-french-corps
  ask german-corps 
  [ 
    if supply > 10 [
      ;; Only pursue/attack french-corps if they have not reached paris
      let paris one-of junctions with [label = "Paris"]
      ifelse any? french-corps with [current-junction != paris] [
        ifelse any? french-corps in-radius 0.5 [ ;; If in attack-rad => attack
          attack-french-corps 
        ][;; Else, keep moving toward 
          pursue-french-corps
        ]
      ][ 
        move-german-corps one-of junctions with [label = "Meaux"]
      ]
    ]
  ]
end

to pursue-french-corps
  ;; Follow French's movement direction
  move-german-corps [current-junction] of min-one-of french-corps [distance myself]
end

to attack-french-corps
  ;; Fight
  set attrition german-attrition
  let damage-given attrition * units * ammo-modifier * (random-float 0.5 + 0.75)
  ask one-of french-corps in-radius 0.5 [
    set attacker myself
    set units units - damage-given
    if units <= 0 [die]
  ]
  
  ;; Lose supply
    ask german-corps [if supply > 0 [set supply supply - supply-decay * time-scale ]]
end

to-report ammo-modifier
  if supply > capacity * 0.8 [report 1.0]
  if supply > capacity * 0.6 [report 0.9]
  if supply > capacity * 0.4 [report 0.5]
  if supply > capacity * 0.2 [report 0.2]
  if supply > 0 [report 0.1]
  report 0
end

to supply-german-corps
  let wagon-speed 25    ;km/h
  let number-wagons 900
  let wagon-capacity 1  ;tons
  let truck-speed 30    ;km/h
  let truck-capacity 6  ;tons
  let truck-loss 2.5    ;per day
  
  if number-trucks >= truck-loss * time-scale [set number-trucks (number-trucks - truck-loss * time-scale)]
  
  ask german-corps [
    let dist-railhead distance railhead
    
    let wagon-supply-gain number-wagons * wagon-capacity * (dist-railhead / (wagon-speed * time-scale * map-scale) / 2) / count german-corps
    let motor-supply-gain number-trucks * truck-capacity * (dist-railhead / (truck-speed * map-scale) / 2) / count german-corps
    let supply-gain wagon-supply-gain + motor-supply-gain
    if dist-railhead = 0 [set supply-gain number-wagons * wagon-capacity]
    ask railhead [
      if supply < supply-gain [
        set supply-gain supply
      ]
      set supply supply - supply-gain
    ]
    if-else supply + supply-gain >= capacity [
      set supply capacity
    ][
      set supply supply + supply-gain
    ]
  ]
end