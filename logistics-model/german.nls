breed [german-corps a-german-corps]

german-corps-own [supply current-junction]

to setup-germans
  let x [xcor] of one-of junctions with [label = "Brussels"]
  let y [ycor] of one-of junctions with [label = "Brussels"]
  set-default-shape german-corps "square"
  
  create-german-corps 1 [
    setxy x y
    set supply 100
    set current-junction "Brussels"
    set color yellow
    set size 2
  ]
end

to step-german
  check-french-corps
  supply-german-corps
end

to move-german-corps
  nw:set-context junctions roads
  let junction-label [current-junction] of one-of german-corps
  ask one-of junctions with [label = junction-label] [
    set shortest-path nw:turtles-on-path-to one-of junctions with [label = "Meaux"]
  ]
;  show shortest-path
  let next-junction item 1 shortest-path
  ask german-corps [
    move-to next-junction
    set current-junction [label] of next-junction
  ]
end

;; Check for french corps in perimeter
;; TODO: change this but for now:
;; pursue_rad = 10: if w/i 10 => pursue
;; attack_rad = 5; if w/i 5 => fight
;; If french corp turtle is w/i above rads => pursue or fight
to check-french-corps
  ask german-corps [ 
    ifelse any? french-corps in-radius pursue-radius 
    [
      ;; Pursue then attack
      pursue-french-corps
      let in-attack-rad any? french-corps in-radius attack-radius
      print(word  "pursuing: "  in-attack-rad )
      
      if in-attack-rad
        [ 
          attack-french-corps 
          output-print "attacking"
        ]
    ]
    [ 
      print "moving towards Meaux"
      move-german-corps 
    
    ]
  ]
end

;; TODO: Refactor this and group with move-german-corps => pass dest as param
to pursue-french-corps
  ;; Follow French's movement direction
  nw:set-context junctions roads
  let junction-label [current-junction] of one-of german-corps
  
  ;; Get french-corps' junction
  let french-junction-label [current-junction] of one-of french-corps
  
  ;; Move towards that junction
  ask one-of junctions with [label = junction-label] [
    set shortest-path nw:turtles-on-path-to one-of junctions with [label = french-junction-label]
  ]
;  show shortest-path
  let next-junction item 1 shortest-path
  ask german-corps [
    move-to next-junction
    set current-junction [label] of next-junction
  ]
end

to attack-french-corps
   ;; do things
  
  ;; Lose supply
  ask german-corps [ set supply supply - supply-decay ]
end

to supply-german-corps
  let station-modifier station-resupply * (1 / (station-damage + 1.0)) + random-float 5 - 2.5
  
  ;;TODO: WHAT?
  ;; ONLY lose supply (-supply-decay) during battle!!
  ;;ask german-corps [set supply supply - supply-decay + station-modifier ]
  ask german-corps [set supply supply + station-modifier ]
end