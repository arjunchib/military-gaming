breed [german-corps a-german-corps]

german-corps-own [supply current-junction speed]

globals [attack-radius]

to setup-germans
  set attack-radius 0
  
  set-default-shape german-corps "square"
  
  let start-junction one-of junctions with [label = "Brussels"]
  
  create-german-corps 6
  [
    setxy [xcor] of start-junction [ycor] of start-junction
    set supply 100
    set current-junction start-junction
    set color yellow
    set size 1
    set speed german-speed * time-scale * map-scale
  ]
end

to step-german
  check-french-corps
  supply-german-corps
end

;; dest_label: label of the destination
;; This proc moves the German corps along the shortest path between the 
;; current location of the German corps and the destination
to move-german-corps [my-german-corps dest-junction]
  ask my-german-corps [
    nw:set-context junctions roads
    if-else distance current-junction <= speed [
      move-to current-junction
      let shortest-path (list current-junction)
      ask current-junction 
      [
        set shortest-path nw:turtles-on-weighted-path-to dest-junction weight
      ]
      let next-junction item 0 shortest-path
      if length shortest-path > 1 [set next-junction item 1 shortest-path]
      face next-junction
      set current-junction next-junction
    ][
      set speed german-speed * time-scale * map-scale
      forward speed * random-float 1
    ]
  ]
end

;; Check to see if French corps are nearby
;; If within pursue-rad => Pursue
;;      If within attack-rad => Attack
;; Else keep moving towards Meaux
to check-french-corps
  ask german-corps 
  [ 
    ;; Lose supply
    ask german-corps [if supply > 0 [set supply supply - supply-decay * time-scale ]]
    
    ;; Only pursue/attack french-corps if they're alive
    ifelse any? french-corps in-radius pursue-distance
    [
      ;; If in attack-rad => attack
      ifelse any? french-corps in-radius attack-radius
      [ 
        attack-french-corps 
      ]
      ;; Else, keep moving toward
      [ 
        pursue-french-corps
      ]
    ]
    [ 
      ;print "Not near French-corps or French-corps are all dead; Moving towards Meaux"
      move-german-corps self one-of junctions with [label = "Meaux"]
    ]
  ]
end

to pursue-french-corps
  ;print "Pursuing French-corps" 
  
  ;; Follow French's movement direction
  move-german-corps self [current-junction] of min-one-of french-corps [distance myself]
end

to attack-french-corps
  ;; Reduce french-corps size?
  ;print "Attacking french-corps"
  
  ;; Fight
  ;; For now just decrease the size of french-corps
  ask one-of french-corps in-radius attack-radius [
    set units units - 1
    if units <= 0 [die]
  ]
end

to supply-german-corps
  ask german-corps [
    ;; For now , just make it indirectly proportional:
    let dist-railhead distance railhead
    
    let supply-gain number-supply-companies * dist-railhead / (supply-company-speed * time-scale * map-scale) / 2 * supply-company-capacity
    ask railhead [
      if supply < supply-gain [
        set supply-gain supply
      ]
      set supply supply - supply-gain
    ]
    
    set supply supply + supply-gain
  ]
end