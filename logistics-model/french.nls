breed [french-corps a-french-corps]

french-corps-own [units current-junction speed]

globals [destruction]

to setup-french
  let start-junction one-of junctions with [label = "Mons"]
  set-default-shape french-corps "circle"
  
  create-french-corps 6 [
    setxy [xcor] of start-junction [ycor] of start-junction
    set current-junction start-junction
    set color blue
    set size 1
    set speed allied-speed * map-scale * time-scale
    set units 100
  ]
  
  set destruction 0
end

to step-french
  ask french-corps [
    if-else destruction >= destruction-capacity or
    count german-corps in-radius retreat-distance * map-scale > 0 [
      french-retreat self
    ][
      french-plunder self
    ]
  ]
end

to french-retreat [my-french-corps]
  move-french my-french-corps one-of junctions with [label = "Paris"]
end

to french-plunder [my-french-corps]
  nw:set-context junctions roads
  ask my-french-corps [
    if distance current-junction <= speed [
      move-to current-junction
      let current-junction-label [label] of current-junction
      let my-current-station one-of stations with [label = current-junction-label]
      
      if-else my-current-station != nobody [
        let min-link nobody
        
        if my-current-station != nobody [
          ask my-current-station [
            set min-link min-one-of my-out-tracks with [health > track-damage-threshold] [weight]
          ]
        ]
        
        if (min-link != nobody) [
          set destruction destruction + track-damage * time-scale
          ask min-link [set health health - track-damage * time-scale]
        ]
      ][
        let paris-junction one-of junctions with [label = "Paris"]
        let dist-paris distance paris-junction
        let dest-junction item 0 sort-by [
          [junction1 junction2] -> distance junction1 < distance junction2
        ] junctions with [distance paris-junction <= dist-paris]
        move-french self dest-junction
      ]
    ]
  ]
end

to move-french [my-french-corps dest-junction]
  ask my-french-corps [
    if-else distance current-junction <= speed [
      move-to current-junction
      let shortest-path (list current-junction)
      ask current-junction [
        nw:set-context junctions roads
        set shortest-path nw:turtles-on-weighted-path-to dest-junction weight
      ]
      let next-junction item 0 shortest-path
      if length shortest-path > 1 [set next-junction item 1 shortest-path]
      face next-junction
      set current-junction next-junction
    ][
      set speed allied-speed * map-scale * time-scale
      forward speed * random-float 1
    ]
  ]
end
