breed [french-corps a-french-corps]

french-corps-own [units current-junction speed attrition loss-threshold plunder attacker mode]

globals [destruction track-damage]

to setup-french
  set-default-shape french-corps "circle"
  
  create-french-corps 1 [
    let start-junction one-of junctions with [label = "Mons"]
    setxy [xcor] of start-junction [ycor] of start-junction
    set current-junction start-junction
  ]
  
  create-french-corps 1 [
    let start-junction one-of junctions with [label = "Maubeuge"]
    setxy [xcor] of start-junction [ycor] of start-junction
    set current-junction start-junction
  ]
  
  set track-damage 50
  
  ask french-corps [
    set color blue
    set size 1
    set speed allied-speed * map-scale * time-scale
    set units allied-num-units
    set loss-threshold allied-num-units - allied-loss-threshold
    set plunder track-damage
    set attrition allied-attrition
    set attacker nobody
    set mode "attack"
  ]
  
  set destruction 0
end

to step-french
  ask french-corps [
    if attacker != nobody and units > loss-threshold [
      french-attack
      set mode "attack"
      stop
    ]
    if attacker = nobody or not allied-retreat [
      french-plunder
      set mode "plunder"
      stop
    ]
    if allied-retreat [
      french-retreat
      set mode "retreat"
    ]
  ]
end

to french-retreat
  move-french one-of junctions with [label = "Paris"]
end

to french-plunder
  if-else distance current-junction <= speed [
    move-to current-junction
    let current-junction-label [label] of current-junction
    let my-current-station one-of stations with [label = current-junction-label]
    
    if my-current-station != nobody [
      let min-link nobody
      ask my-current-station [
        set min-link min-one-of my-out-tracks with [health > 0] [travel-time]
      ]
      if (min-link != nobody) [
        let damage-given plunder * time-scale
        set destruction destruction + damage-given
        ask min-link [
          if-else health - damage-given >= 0 [set health health - damage-given][set health 0]
        ]
        stop
      ]
    ]
    let dest-station get-new-dest-station
    move-french dest-station
  ][
    move-french current-junction
  ]
end

to-report get-new-dest-station
  let paris one-of junctions with [label = "Paris"]
  let my-current-junction current-junction
  let possible-junctions (list)
  nw:set-context junctions roads
  let dist-paris nw:weighted-distance-to paris weight
  ask junctions with [self != my-current-junction] [
    let dist nw:weighted-distance-to paris weight
    if is-number? dist and is-number? dist-paris and dist < dist-paris [
      set possible-junctions lput self possible-junctions
    ]
  ]
  let dest-junction paris
  if length possible-junctions > 0 [
    set dest-junction item 0 sort-by [
      [junction1 junction2] -> distance junction1 < distance junction2
    ] turtle-set possible-junctions
  ]
  report dest-junction
end

to french-attack
  let damage-given attrition * units * (random-float 0.5 + 0.75)
  ask attacker [
    set units units - damage-given
    if units <= 0 [die]
  ]
end

to move-french [dest-junction]
  if-else distance current-junction <= speed [
    move-to current-junction
    set loss-threshold units - allied-loss-threshold
    let shortest-path (list current-junction)
    ask current-junction [
      nw:set-context junctions roads
      set shortest-path nw:turtles-on-weighted-path-to dest-junction weight
    ]
    let next-junction item 0 shortest-path
    if length shortest-path > 1 [set next-junction item 1 shortest-path]
    face next-junction
    set current-junction next-junction
  ][
    set speed allied-speed * map-scale * time-scale
    forward speed * (random-float 0.5 + 0.75)
  ]
end
