globals [railhead source]

breed [trains train]
breed [stations station]
undirected-link-breed [tracks track]
breed [junctions junction]
undirected-link-breed [roads road]

trains-own [current-station speed supply capacity]
tracks-own [health]
stations-own [supply]

to setup-infrastructure
  setup-junctions
  setup-roads
  setup-stations
  setup-tracks
  setup-trains
  set railhead one-of stations with [label = "Cambrai"]
  set source one-of stations with [label = "Aix-la-Chapelle"]
end

to step-infrastructure
  update-tracks
  update-trains
end

to setup-junctions
  let junction-data csv:from-file "junctions.csv"
  set-default-shape junctions "dot"
  foreach junction-data [ [data] ->
    let x item 0 data
    let y item 1 data
    create-junctions 1 [
      setxy x y
      set label item 2 data
    ]
  ]
  ask junctions [set color white]
  ask junctions [set hidden? true]
end

to setup-roads
  let road-data csv:from-file "roads.csv"
  set-default-shape roads "road"
  foreach road-data [ [data] ->
    let s item 0 data
    let t item 1 data
    ask junctions with [label = s] [create-roads-with junctions with [label = t]]
  ]
  ask roads [set color white]
end

to setup-stations
  let station-data csv:from-file "stations.csv"
  set-default-shape stations "triangle"
  foreach station-data [ [data] ->
    let x item 0 data
    let y item 1 data
    create-stations 1 [
      setxy x y
      set label item 2 data
    ]
  ]
  ask stations [
    set color 55
    set size 1.5
  ]
end

to setup-tracks
  let health5 [130 255 56]

  let track-data csv:from-file "tracks.csv"
  set-default-shape tracks "train"
  foreach track-data [ [data] ->
    let s item 0 data
    let t item 1 data

    ask stations with [label = s] [create-tracks-with stations with [label = t]]

    ask tracks [
      set health 100
      set color health5
    ]
  ]
end

to setup-trains
  set-default-shape trains "train freight engine"
  
  let start-station one-of stations with [label = "Aix-la-Chapelle"]
  
  create-trains 1
  [
    setxy [xcor] of start-station [ycor] of start-station
    set supply 100
    set capacity 100
    set speed 1 ;; distance / hour
    set current-station start-station
    set color yellow
    set size 2
  ]
end

to update-trains
  ask trains [
    let at-station? distance current-station <= speed
    if-else at-station? [
      move-to current-station
      let in-transfer? false
      if current-station = railhead and supply > 0 [
        set in-transfer? true
        let transfer-supply 10
        if supply < 10 [
          set transfer-supply supply
        ]
        ask current-station [set supply supply + transfer-supply]
        set supply supply - transfer-supply
      ]
      if current-station = source and supply < capacity [
        set in-transfer? true
        set supply supply + 10
      ]
      if not in-transfer? [
        let dest-station railhead
        if supply <= 0 [set dest-station source]
        let shortest-path (list current-station)
        ask current-station [
          nw:set-context stations tracks
          set shortest-path nw:turtles-on-path-to dest-station
        ]
        let next-station item 1 shortest-path
        face next-station
        set current-station next-station
      ]
    ][
      forward speed
    ]
  ]
end

to update-tracks
  let health5 [130 255 56]
  let health4 [147 193 42]
  let health3 [164 131 28]
  let health2 [181 69 14]
  let health1 [199 7 0]
  let c 55

  ;print "test1"

  ask tracks [
    ;print trackHealth
    if health >= 0 and health < 20 [
      set c health1
     ; print "health1"
    ]
    if health >= 20 and health < 40 [
      set c health2
      ;print "health2"
    ]
    if health >= 40 and health < 60 [
      set c health3
    ]
    if health >= 60 and health < 80 [
      set c health4
    ]
    if health >= 80 and health <= 100 [
      set c health5
      ;print "test2"
    ]
    set color c
  ]
end